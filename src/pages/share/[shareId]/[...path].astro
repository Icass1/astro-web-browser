---
import Layout from "@/layouts/Layout.astro";

import "@/styles/globals.css";
import { db } from "@/lib/db";
import type { DatabaseShare } from "@/types";

import path from "path";
import fs from "fs/promises";

import { getDirectory } from "@/lib/getDirectory";
// @ts-ignore
import { isText } from "istextorbinary";
import { fileTypeFromBuffer } from "file-type";

import MainView from "@/components/MainView";
import FileContentView from "@/components/ContentFile/FileContentView";

import { Button } from '@/components/ui/button';
import type { DatabaseConfig, DatabaseUser } from '@/types'

import * as qrcode from "qrcode"

import {
    Download,
    ChevronRight,
} from "lucide-react";

const share = db
    .prepare(
        `SELECT * FROM share WHERE path='${Astro.params.shareId as string}'`,
    )
    .get() as DatabaseShare;

if (share == undefined) {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        },
    );
}

const directoryPath = path.join(share.local_path, Astro.params.path || ""); // replace 'your-directory' with the path

// Read the directory
let directoryListing = undefined;

let isDirectory = true;
let fileContent;
let isTextFile;
let stat;
let fileType;
let error

try {
    stat = await fs.stat(directoryPath);

    isDirectory = stat.isDirectory();
    if (isDirectory) {
        directoryListing = await getDirectory(directoryPath);
    } else {
        fileContent = await fs.readFile(directoryPath);
        isTextFile = isText(directoryPath, fileContent, () => {}) as unknown;
        fileType = await fileTypeFromBuffer(fileContent);

        if (!isTextFile) {
            fileContent = undefined;
        }
    }
} catch (err) {
    error = err
    console.error("Error reading directory:", error);
}

const collaboraURL = (db.prepare("SELECT collabora_url FROM config").get() as DatabaseConfig).collabora_url

const QRBuffer = (await qrcode.toBuffer(`http://192.168.1.129:4321/share/${share.id}`, {margin: 1, width: 200})).toString('base64')


// Check if user owns the share, if not, it adds one to times_accessed.
const sharesString = (db.prepare(`SELECT shares FROM user WHERE id = '${Astro.locals?.user?.id}'`).get() as DatabaseUser)?.shares
if (sharesString) {
    const shares = JSON.parse(sharesString)

    if (shares.includes(share.id)) {
    } else {
        db.exec(`UPDATE share SET times_accessed = ${share.times_accessed + 1} WHERE id = '${share.id}'`)
    }

} else {
    db.exec(`UPDATE share SET times_accessed = ${share.times_accessed + 1} WHERE id = '${share.id}'`)
}

---

<Layout
    title={Astro.params.path
        ? Astro.params.path.split("/")[Astro.params.path.split("/").length - 1]
        : "FileBrowser"}
>
    <div class="h-full m-4 p-3 pb-8 flex flex-col">
        <div>
            <p class='font-semibold text-2xl'>{share.local_path.split("/")[share.local_path.split("/").length - 1]}</p>
            <p class="text-sm text-muted-foreground">Shared Directory</p>
  
            <div class="flex justify-between items-center mb-4">
                <div>
                    {isDirectory && <p class="text-sm text-muted-foreground">Total Files: {directoryListing && directoryListing?.length}</p>}
                    <p class="text-sm text-muted-foreground">Share ID: {Astro.params.shareId}</p>
                </div>
                <div class="flex space-x-2">
                    <Button><Download className='w-5 h-5 mr-2'/>Download All</Button>
                    <img class="w-36 h-36 bg-gray-200 flex items-center justify-center" src={`data:image/jpeg;base64,${QRBuffer}`}/>
                </div>
            </div>

            <div class="flex flex-row items-center w-full overflow-x-hidden">
                <a class="font-semibold hover:bg-muted px-2 rounded py-1" href={`/share/${share.path}`}>Home</a>
                {Astro.params.path?.split("/").map((dir, index, path)=> (
                    <div class="w-7 h-7">
                        <ChevronRight className='w-7 h-7'/>     
                    </div>
                <a class="font-semibold hover:bg-muted rounded px-2 py-1" href={`/share/${share.path}/` + path.slice(0, index+1).join("/")}>{dir}</a>
                ))}
            </div>
        </div>


        {error != undefined && 
            <div class="text-accent font-bold text-4xl ml-auto mr-auto mt-32 w-fit flex flex-col gap-1">
                    <label>Unable to get directory contents</label>
                    <label class="font-normal text-sm">{error}</label>
            </div>
        }
        {error == undefined && isDirectory && !directoryListing &&  
            <div class="text-accent font-bold text-4xl ml-auto mr-auto mt-32 w-fit flex flex-col gap-1">
                <label>Unable to get directory contents</label>
                <label class="font-normal text-sm">{error}</label>
            </div>
        }
        {error == undefined && isDirectory && directoryListing &&  
            <MainView
                directoryListing={directoryListing}
                path={Astro.params.path as string}
                client:only="react"
                editable={true}
            />
        }

        {error == undefined && !isDirectory  && isTextFile != undefined && 
            <FileContentView
                path={"/api/share/" + share.id + "/" + Astro.params.path || "/"}
                fileContent={fileContent}
                isText={isTextFile as boolean}
                fileExt={fileType?.ext}
                fileType={fileType?.mime}
                userId={Astro.locals?.user?.id || "guest"}
                collaboraURL={collaboraURL}
                client:visible
            />
        }

        {error == undefined && !isDirectory && isTextFile == undefined && 
            <div>Error</div>
            <div>error == undefined -> {JSON.stringify(error == undefined)}</div>
            <div>!isDirectory -> {JSON.stringify(!isDirectory)}</div>
            <div>isTextFile != undefined -> {JSON.stringify(isTextFile != undefined)}</div>
            <div>fileType?.ext != undefined -> {JSON.stringify(fileType?.ext != undefined)}</div>
            <div>fileType?.mime != undefined -> {JSON.stringify(fileType?.mime != undefined)}</div>
        }
    </div>
</Layout>


