---
import { db } from "@/lib/db";
import type { DatabaseBackup, DatabaseConfig } from "@/types";
import "@/styles/globals.css";
import FileContentView from "@/components/ContentFile/FileContentView";
import ViewTransitions from "astro/components/ViewTransitions.astro";
import fs from "fs/promises";
import { isText } from "istextorbinary";

import { fileTypeFromBuffer } from "file-type";
if (!Astro.locals.user?.admin) {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        },
    );
}

if (!Astro.params.id) {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        },
    );
}

const backupDB = db
    .prepare(`SELECT * FROM backup WHERE id='${Astro.params.id}'`)
    .get() as DatabaseBackup;



if (!backupDB) {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        },
    );
}


const config = db.prepare("SELECT * FROM config").get() as DatabaseConfig;

const collaboraURL = config.collabora_url;
const WOPIHost = config.wopi_host;

let backupFileContent: Buffer | undefined = await fs.readFile(
    `backups/${Astro.params.id}`,
);
const backupIsTextFile = isText(
    `backups/${Astro.params.id}`,
    backupFileContent,
    () => {},
) as unknown;
const backupFileType = await fileTypeFromBuffer(backupFileContent);

if (!backupIsTextFile) {
    backupFileContent = undefined;
}

const absolutePath = backupDB.actual_file_path
const relativePath = backupDB.actual_file_path.replace(Astro.locals.user.scope, "")

let actualFileContent: Buffer | undefined = await fs.readFile(
    `backups/${Astro.params.id}`,
);
const actualIsTextFile = isText(
    `backups/${Astro.params.id}`,
    actualFileContent,
    () => {},
) as unknown;
const actualFileType = await fileTypeFromBuffer(actualFileContent);

if (!actualIsTextFile) {
    backupFileContent = undefined;
}


---

<!doctype html>
<html lang="en" class="dark">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="FileBrowser login" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <meta name="generator" content={Astro.generator} />
        <title>Backup</title>
        <ViewTransitions />
    </head><body>
        <main class="overflow-hidden h-full w-full">
            <div class="w-full h-full grid grid-cols-2 gap-1">
                <FileContentView
                    relativePath={Astro.params.id}
                    absolutePath={Astro.params.id}
                    fileContent={backupFileContent}
                    isText={backupIsTextFile as boolean}
                    fileExt={backupFileType?.ext}
                    fileType={backupFileType?.mime}
                    userId={Astro.locals.user.id}
                    collaboraURL={collaboraURL}
                    type="backup"
                    id={Astro.params.id}
                    WOPIHost={WOPIHost}
                    client:only="react"
                />
                <FileContentView
                    relativePath={relativePath}
                    absolutePath={absolutePath}
                    fileContent={actualFileContent}
                    isText={actualIsTextFile as boolean}
                    fileExt={actualFileType?.ext}
                    fileType={actualFileType?.mime}
                    userId={Astro.locals.user.id}
                    collaboraURL={collaboraURL}
                    type="normal"
                    id={Astro.params.id}
                    WOPIHost={WOPIHost}
                    client:only="react"
                />
            </div>
        </main>
    </body>
</html>
